/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: socketMessage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export enum PlayerControl {
    UP = 0,
    DOWN = 1,
    LEFT = 2,
    RIGHT = 3
}
export class SocketMessage extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
    constructor(data?: any[] | ({} & (({
        gamePing?: GamePing;
        controlChangeEvent?: never;
        joinEvent?: never;
        gameOverEvent?: never;
        errorReply?: never;
    } | {
        gamePing?: never;
        controlChangeEvent?: ControlChangeEvent;
        joinEvent?: never;
        gameOverEvent?: never;
        errorReply?: never;
    } | {
        gamePing?: never;
        controlChangeEvent?: never;
        joinEvent?: JoinEvent;
        gameOverEvent?: never;
        errorReply?: never;
    } | {
        gamePing?: never;
        controlChangeEvent?: never;
        joinEvent?: never;
        gameOverEvent?: GameOverEvent;
        errorReply?: never;
    } | {
        gamePing?: never;
        controlChangeEvent?: never;
        joinEvent?: never;
        gameOverEvent?: never;
        errorReply?: ErrorReply;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("gamePing" in data && data.gamePing != undefined) {
                this.gamePing = data.gamePing;
            }
            if ("controlChangeEvent" in data && data.controlChangeEvent != undefined) {
                this.controlChangeEvent = data.controlChangeEvent;
            }
            if ("joinEvent" in data && data.joinEvent != undefined) {
                this.joinEvent = data.joinEvent;
            }
            if ("gameOverEvent" in data && data.gameOverEvent != undefined) {
                this.gameOverEvent = data.gameOverEvent;
            }
            if ("errorReply" in data && data.errorReply != undefined) {
                this.errorReply = data.errorReply;
            }
        }
    }
    get gamePing() {
        return pb_1.Message.getWrapperField(this, GamePing, 1) as GamePing;
    }
    set gamePing(value: GamePing) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_gamePing() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get controlChangeEvent() {
        return pb_1.Message.getWrapperField(this, ControlChangeEvent, 2) as ControlChangeEvent;
    }
    set controlChangeEvent(value: ControlChangeEvent) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_controlChangeEvent() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get joinEvent() {
        return pb_1.Message.getWrapperField(this, JoinEvent, 3) as JoinEvent;
    }
    set joinEvent(value: JoinEvent) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_joinEvent() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get gameOverEvent() {
        return pb_1.Message.getWrapperField(this, GameOverEvent, 4) as GameOverEvent;
    }
    set gameOverEvent(value: GameOverEvent) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_gameOverEvent() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get errorReply() {
        return pb_1.Message.getWrapperField(this, ErrorReply, 5) as ErrorReply;
    }
    set errorReply(value: ErrorReply) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_errorReply() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "gamePing" | "controlChangeEvent" | "joinEvent" | "gameOverEvent" | "errorReply";
        } = {
            0: "none",
            1: "gamePing",
            2: "controlChangeEvent",
            3: "joinEvent",
            4: "gameOverEvent",
            5: "errorReply"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
    }
    static fromObject(data: {
        gamePing?: ReturnType<typeof GamePing.prototype.toObject>;
        controlChangeEvent?: ReturnType<typeof ControlChangeEvent.prototype.toObject>;
        joinEvent?: ReturnType<typeof JoinEvent.prototype.toObject>;
        gameOverEvent?: ReturnType<typeof GameOverEvent.prototype.toObject>;
        errorReply?: ReturnType<typeof ErrorReply.prototype.toObject>;
    }): SocketMessage {
        const message = new SocketMessage({});
        if (data.gamePing != null) {
            message.gamePing = GamePing.fromObject(data.gamePing);
        }
        if (data.controlChangeEvent != null) {
            message.controlChangeEvent = ControlChangeEvent.fromObject(data.controlChangeEvent);
        }
        if (data.joinEvent != null) {
            message.joinEvent = JoinEvent.fromObject(data.joinEvent);
        }
        if (data.gameOverEvent != null) {
            message.gameOverEvent = GameOverEvent.fromObject(data.gameOverEvent);
        }
        if (data.errorReply != null) {
            message.errorReply = ErrorReply.fromObject(data.errorReply);
        }
        return message;
    }
    toObject() {
        const data: {
            gamePing?: ReturnType<typeof GamePing.prototype.toObject>;
            controlChangeEvent?: ReturnType<typeof ControlChangeEvent.prototype.toObject>;
            joinEvent?: ReturnType<typeof JoinEvent.prototype.toObject>;
            gameOverEvent?: ReturnType<typeof GameOverEvent.prototype.toObject>;
            errorReply?: ReturnType<typeof ErrorReply.prototype.toObject>;
        } = {};
        if (this.gamePing != null) {
            data.gamePing = this.gamePing.toObject();
        }
        if (this.controlChangeEvent != null) {
            data.controlChangeEvent = this.controlChangeEvent.toObject();
        }
        if (this.joinEvent != null) {
            data.joinEvent = this.joinEvent.toObject();
        }
        if (this.gameOverEvent != null) {
            data.gameOverEvent = this.gameOverEvent.toObject();
        }
        if (this.errorReply != null) {
            data.errorReply = this.errorReply.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_gamePing)
            writer.writeMessage(1, this.gamePing, () => this.gamePing.serialize(writer));
        if (this.has_controlChangeEvent)
            writer.writeMessage(2, this.controlChangeEvent, () => this.controlChangeEvent.serialize(writer));
        if (this.has_joinEvent)
            writer.writeMessage(3, this.joinEvent, () => this.joinEvent.serialize(writer));
        if (this.has_gameOverEvent)
            writer.writeMessage(4, this.gameOverEvent, () => this.gameOverEvent.serialize(writer));
        if (this.has_errorReply)
            writer.writeMessage(5, this.errorReply, () => this.errorReply.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SocketMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocketMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.gamePing, () => message.gamePing = GamePing.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.controlChangeEvent, () => message.controlChangeEvent = ControlChangeEvent.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.joinEvent, () => message.joinEvent = JoinEvent.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.gameOverEvent, () => message.gameOverEvent = GameOverEvent.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.errorReply, () => message.errorReply = ErrorReply.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SocketMessage {
        return SocketMessage.deserialize(bytes);
    }
}
export class GamePing extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        serverAge?: number;
        players?: Player[];
        platforms?: Platform[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("serverAge" in data && data.serverAge != undefined) {
                this.serverAge = data.serverAge;
            }
            if ("players" in data && data.players != undefined) {
                this.players = data.players;
            }
            if ("platforms" in data && data.platforms != undefined) {
                this.platforms = data.platforms;
            }
        }
    }
    get serverAge() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set serverAge(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get players() {
        return pb_1.Message.getRepeatedWrapperField(this, Player, 2) as Player[];
    }
    set players(value: Player[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get platforms() {
        return pb_1.Message.getRepeatedWrapperField(this, Platform, 3) as Platform[];
    }
    set platforms(value: Platform[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        serverAge?: number;
        players?: ReturnType<typeof Player.prototype.toObject>[];
        platforms?: ReturnType<typeof Platform.prototype.toObject>[];
    }): GamePing {
        const message = new GamePing({});
        if (data.serverAge != null) {
            message.serverAge = data.serverAge;
        }
        if (data.players != null) {
            message.players = data.players.map(item => Player.fromObject(item));
        }
        if (data.platforms != null) {
            message.platforms = data.platforms.map(item => Platform.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            serverAge?: number;
            players?: ReturnType<typeof Player.prototype.toObject>[];
            platforms?: ReturnType<typeof Platform.prototype.toObject>[];
        } = {};
        if (this.serverAge != null) {
            data.serverAge = this.serverAge;
        }
        if (this.players != null) {
            data.players = this.players.map((item: Player) => item.toObject());
        }
        if (this.platforms != null) {
            data.platforms = this.platforms.map((item: Platform) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.serverAge != 0)
            writer.writeUint32(1, this.serverAge);
        if (this.players.length)
            writer.writeRepeatedMessage(2, this.players, (item: Player) => item.serialize(writer));
        if (this.platforms.length)
            writer.writeRepeatedMessage(3, this.platforms, (item: Platform) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GamePing {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GamePing();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.serverAge = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.players, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Player.deserialize(reader), Player));
                    break;
                case 3:
                    reader.readMessage(message.platforms, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Platform.deserialize(reader), Platform));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GamePing {
        return GamePing.deserialize(bytes);
    }
}
export class ControlChangeEvent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pressedControls?: PlayerControl[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pressedControls" in data && data.pressedControls != undefined) {
                this.pressedControls = data.pressedControls;
            }
        }
    }
    get pressedControls() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as PlayerControl[];
    }
    set pressedControls(value: PlayerControl[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        pressedControls?: PlayerControl[];
    }): ControlChangeEvent {
        const message = new ControlChangeEvent({});
        if (data.pressedControls != null) {
            message.pressedControls = data.pressedControls;
        }
        return message;
    }
    toObject() {
        const data: {
            pressedControls?: PlayerControl[];
        } = {};
        if (this.pressedControls != null) {
            data.pressedControls = this.pressedControls;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pressedControls.length)
            writer.writePackedEnum(1, this.pressedControls);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControlChangeEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControlChangeEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pressedControls = reader.readPackedEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControlChangeEvent {
        return ControlChangeEvent.deserialize(bytes);
    }
}
export class JoinEvent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): JoinEvent {
        const message = new JoinEvent({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JoinEvent {
        return JoinEvent.deserialize(bytes);
    }
}
export class GameOverEvent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        reason?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
        }
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        reason?: string;
    }): GameOverEvent {
        const message = new GameOverEvent({});
        if (data.reason != null) {
            message.reason = data.reason;
        }
        return message;
    }
    toObject() {
        const data: {
            reason?: string;
        } = {};
        if (this.reason != null) {
            data.reason = this.reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.reason.length)
            writer.writeString(1, this.reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameOverEvent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameOverEvent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.reason = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameOverEvent {
        return GameOverEvent.deserialize(bytes);
    }
}
export class JoinReply extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        serverId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("serverId" in data && data.serverId != undefined) {
                this.serverId = data.serverId;
            }
        }
    }
    get serverId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set serverId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        serverId?: string;
    }): JoinReply {
        const message = new JoinReply({});
        if (data.serverId != null) {
            message.serverId = data.serverId;
        }
        return message;
    }
    toObject() {
        const data: {
            serverId?: string;
        } = {};
        if (this.serverId != null) {
            data.serverId = this.serverId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.serverId.length)
            writer.writeString(1, this.serverId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinReply {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinReply();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.serverId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JoinReply {
        return JoinReply.deserialize(bytes);
    }
}
export class ErrorReply extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        message?: string;
    }): ErrorReply {
        const message = new ErrorReply({});
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorReply {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorReply();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ErrorReply {
        return ErrorReply.deserialize(bytes);
    }
}
export class Player extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        color?: string;
        x?: number;
        y?: number;
        score?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("color" in data && data.color != undefined) {
                this.color = data.color;
            }
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get color() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set color(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        name?: string;
        color?: string;
        x?: number;
        y?: number;
        score?: number;
    }): Player {
        const message = new Player({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.color != null) {
            message.color = data.color;
        }
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.score != null) {
            message.score = data.score;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            color?: string;
            x?: number;
            y?: number;
            score?: number;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.color != null) {
            data.color = this.color;
        }
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.score != null) {
            data.score = this.score;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.color.length)
            writer.writeString(2, this.color);
        if (this.x != 0)
            writer.writeInt32(3, this.x);
        if (this.y != 0)
            writer.writeInt32(4, this.y);
        if (this.score != 0)
            writer.writeUint32(5, this.score);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Player {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Player();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.color = reader.readString();
                    break;
                case 3:
                    message.x = reader.readInt32();
                    break;
                case 4:
                    message.y = reader.readInt32();
                    break;
                case 5:
                    message.score = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Player {
        return Player.deserialize(bytes);
    }
}
export class Platform extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        x?: number;
        y?: number;
        width?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        width?: number;
    }): Platform {
        const message = new Platform({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.width != null) {
            message.width = data.width;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            width?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.width != null) {
            data.width = this.width;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0)
            writer.writeInt32(1, this.x);
        if (this.y != 0)
            writer.writeInt32(2, this.y);
        if (this.width != 0)
            writer.writeUint32(3, this.width);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Platform {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Platform();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readInt32();
                    break;
                case 2:
                    message.y = reader.readInt32();
                    break;
                case 3:
                    message.width = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Platform {
        return Platform.deserialize(bytes);
    }
}
