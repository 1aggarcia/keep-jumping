/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: pingPong.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class PingPong extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        ping?: Ping;
        pong?: never;
    } | {
        ping?: never;
        pong?: Pong;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ping" in data && data.ping != undefined) {
                this.ping = data.ping;
            }
            if ("pong" in data && data.pong != undefined) {
                this.pong = data.pong;
            }
        }
    }
    get ping() {
        return pb_1.Message.getWrapperField(this, Ping, 1) as Ping;
    }
    set ping(value: Ping) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_ping() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get pong() {
        return pb_1.Message.getWrapperField(this, Pong, 2) as Pong;
    }
    set pong(value: Pong) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_pong() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get payload() {
        const cases: {
            [index: number]: "none" | "ping" | "pong";
        } = {
            0: "none",
            1: "ping",
            2: "pong"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        ping?: ReturnType<typeof Ping.prototype.toObject>;
        pong?: ReturnType<typeof Pong.prototype.toObject>;
    }): PingPong {
        const message = new PingPong({});
        if (data.ping != null) {
            message.ping = Ping.fromObject(data.ping);
        }
        if (data.pong != null) {
            message.pong = Pong.fromObject(data.pong);
        }
        return message;
    }
    toObject() {
        const data: {
            ping?: ReturnType<typeof Ping.prototype.toObject>;
            pong?: ReturnType<typeof Pong.prototype.toObject>;
        } = {};
        if (this.ping != null) {
            data.ping = this.ping.toObject();
        }
        if (this.pong != null) {
            data.pong = this.pong.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_ping)
            writer.writeMessage(1, this.ping, () => this.ping.serialize(writer));
        if (this.has_pong)
            writer.writeMessage(2, this.pong, () => this.pong.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingPong {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingPong();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ping, () => message.ping = Ping.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.pong, () => message.pong = Pong.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PingPong {
        return PingPong.deserialize(bytes);
    }
}
export class Ping extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        request?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
        }
    }
    get request() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set request(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        request?: string;
    }): Ping {
        const message = new Ping({});
        if (data.request != null) {
            message.request = data.request;
        }
        return message;
    }
    toObject() {
        const data: {
            request?: string;
        } = {};
        if (this.request != null) {
            data.request = this.request;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.request.length)
            writer.writeString(1, this.request);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ping {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ping();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.request = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Ping {
        return Ping.deserialize(bytes);
    }
}
export class Pong extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        reply?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reply" in data && data.reply != undefined) {
                this.reply = data.reply;
            }
        }
    }
    get reply() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set reply(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        reply?: string;
    }): Pong {
        const message = new Pong({});
        if (data.reply != null) {
            message.reply = data.reply;
        }
        return message;
    }
    toObject() {
        const data: {
            reply?: string;
        } = {};
        if (this.reply != null) {
            data.reply = this.reply;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.reply.length)
            writer.writeString(1, this.reply);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pong {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pong();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.reply = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Pong {
        return Pong.deserialize(bytes);
    }
}
